// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/auth/models/user/app_user.dart';
import 'features/auth/models/user/user_profile.dart';
import 'features/water/models/water_log.dart';
import 'features/water/models/water_preferences.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 9210468346883610997),
      name: 'AppUser',
      lastPropertyId: const obx_int.IdUid(11, 391968824388424808),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6793769419637763149),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 417247235985229651),
            name: 'uid',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(4, 7025674186731478910)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5185424966544459360),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 927931047185036496),
            name: 'photoUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8273309073968860340),
            name: 'isAnonymous',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2555433748586013967),
            name: 'isEmailVerified',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7223991870356115469),
            name: 'isPhoneVerified',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8399786612049634084),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 4140018892505963279),
            relationTarget: 'UserProfile'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 391968824388424808),
            name: 'dbPreferences',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7166028067144916976),
      name: 'UserProfile',
      lastPropertyId: const obx_int.IdUid(18, 1583331589492315386),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7096745133435402091),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5360133605550174324),
            name: 'uid',
            type: 9,
            flags: 34848,
            indexId: const obx_int.IdUid(6, 8320414490647314865)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2642145193887279486),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4395116447830403324),
            name: 'displayName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8429495187897421578),
            name: 'age',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 269684340983521806),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 705516932664929996),
            name: 'photoUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1664576630604936704),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7192482139177737210),
            name: 'painSeverity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1724840226639888386),
            name: 'crisisFrequency',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 6629241393886714269),
            name: 'height',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7408718016768229555),
            name: 'weight',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 8969005121810407638),
            name: 'bmi',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 7467163394291670971),
            name: 'bloodGroup',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 1424233479968241717),
            name: 'allergies',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 5346806588601411509),
            name: 'medicalConditions',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 3418391106783914792),
            name: 'dbGender',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 1583331589492315386),
            name: 'dbGenotype',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 9220182941712639121),
      name: 'WaterLog',
      lastPropertyId: const obx_int.IdUid(4, 8044481272773995284),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2390008030440043296),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3899823053853080757),
            name: 'timestamp',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7571913508040307035),
            name: 'value',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8044481272773995284),
            name: 'dbUnit',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 8525861671860013939),
      name: 'WaterPreferences',
      lastPropertyId: const obx_int.IdUid(4, 5185646952489030688),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5659237027889275562),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6782218037740632246),
            name: 'defaultDailyGoal',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2807300026539704189),
            name: 'defaultLogValue',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5185646952489030688),
            name: 'dbUnit',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(7, 207629943991403341),
      lastIndexId: const obx_int.IdUid(6, 8320414490647314865),
      lastRelationId: const obx_int.IdUid(1, 3092819797569954146),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        207629943991403341,
        3501377542454085602,
        867207695587786430
      ],
      retiredIndexUids: const [8176574082609213585, 7305761162520707228],
      retiredPropertyUids: const [
        1282289976025498362,
        1939078546095740939,
        4071794349192739105,
        2619329977048293077,
        6118583753238647522,
        6382803102056889443,
        2487054705505549957,
        4301197917219853271,
        7597971790492722902,
        2278733653192405247,
        6280962215202403385,
        4588681087413634416,
        5800574081436917065,
        5381275457373125277,
        7362056251971348217,
        3990587320212176692,
        1251136044700750690,
        7394159863890390396,
        6641010694088898159,
        9046109760705459622,
        7851169316088979097,
        7776106648647357425,
        6382851924054177629,
        1938034445264548325,
        6756802899985026265,
        4137700724415044066,
        7538616858440401534,
        4322896623179610370,
        589524113363230822,
        5351588759555286712,
        8332419882270310101
      ],
      retiredRelationUids: const [3092819797569954146],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AppUser: obx_int.EntityDefinition<AppUser>(
        model: _entities[0],
        toOneRelations: (AppUser object) => [object.profile],
        toManyRelations: (AppUser object) => {},
        getId: (AppUser object) => object.id,
        setId: (AppUser object, int id) {
          object.id = id;
        },
        objectToFB: (AppUser object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final emailOffset = fbb.writeString(object.email);
          final photoUrlOffset = object.photoUrl == null
              ? null
              : fbb.writeString(object.photoUrl!);
          final dbPreferencesOffset = fbb.writeString(object.dbPreferences);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, photoUrlOffset);
          fbb.addBool(4, object.isAnonymous);
          fbb.addBool(5, object.isEmailVerified);
          fbb.addBool(6, object.isPhoneVerified);
          fbb.addInt64(7, object.profile.targetId);
          fbb.addOffset(10, dbPreferencesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final isAnonymousParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final isEmailVerifiedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final isPhoneVerifiedParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          final photoUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = AppUser(
              id: idParam,
              email: emailParam,
              isAnonymous: isAnonymousParam,
              uid: uidParam,
              isEmailVerified: isEmailVerifiedParam,
              isPhoneVerified: isPhoneVerifiedParam,
              photoUrl: photoUrlParam)
            ..dbPreferences = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 24, '');
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.profile.attach(store);
          return object;
        }),
    UserProfile: obx_int.EntityDefinition<UserProfile>(
        model: _entities[1],
        toOneRelations: (UserProfile object) => [],
        toManyRelations: (UserProfile object) => {},
        getId: (UserProfile object) => object.id,
        setId: (UserProfile object, int id) {
          object.id = id;
        },
        objectToFB: (UserProfile object, fb.Builder fbb) {
          final uidOffset =
              object.uid == null ? null : fbb.writeString(object.uid!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final displayNameOffset = object.displayName == null
              ? null
              : fbb.writeString(object.displayName!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final photoUrlOffset = object.photoUrl == null
              ? null
              : fbb.writeString(object.photoUrl!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final crisisFrequencyOffset = object.crisisFrequency == null
              ? null
              : fbb.writeString(object.crisisFrequency!);
          final bloodGroupOffset = object.bloodGroup == null
              ? null
              : fbb.writeString(object.bloodGroup!);
          final allergiesOffset = object.allergies == null
              ? null
              : fbb.writeList(object.allergies!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final medicalConditionsOffset = object.medicalConditions == null
              ? null
              : fbb.writeList(object.medicalConditions!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final dbGenderOffset = object.dbGender == null
              ? null
              : fbb.writeString(object.dbGender!);
          final dbGenotypeOffset = object.dbGenotype == null
              ? null
              : fbb.writeString(object.dbGenotype!);
          fbb.startTable(19);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, displayNameOffset);
          fbb.addInt64(4, object.age);
          fbb.addOffset(5, emailOffset);
          fbb.addOffset(6, photoUrlOffset);
          fbb.addOffset(7, phoneOffset);
          fbb.addInt64(8, object.painSeverity);
          fbb.addOffset(9, crisisFrequencyOffset);
          fbb.addFloat64(10, object.height);
          fbb.addFloat64(11, object.weight);
          fbb.addFloat64(12, object.bmi);
          fbb.addOffset(13, bloodGroupOffset);
          fbb.addOffset(14, allergiesOffset);
          fbb.addOffset(15, medicalConditionsOffset);
          fbb.addOffset(16, dbGenderOffset);
          fbb.addOffset(17, dbGenotypeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final ageParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final photoUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final crisisFrequencyParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final painSeverityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final heightParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 24);
          final weightParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 26);
          final bmiParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 28);
          final bloodGroupParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final allergiesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 32);
          final medicalConditionsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 34);
          final object = UserProfile(
              id: idParam,
              uid: uidParam,
              name: nameParam,
              age: ageParam,
              displayName: displayNameParam,
              email: emailParam,
              photoUrl: photoUrlParam,
              phone: phoneParam,
              crisisFrequency: crisisFrequencyParam,
              painSeverity: painSeverityParam,
              height: heightParam,
              weight: weightParam,
              bmi: bmiParam,
              bloodGroup: bloodGroupParam,
              allergies: allergiesParam,
              medicalConditions: medicalConditionsParam)
            ..dbGender = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 36)
            ..dbGenotype = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 38);

          return object;
        }),
    WaterLog: obx_int.EntityDefinition<WaterLog>(
        model: _entities[2],
        toOneRelations: (WaterLog object) => [],
        toManyRelations: (WaterLog object) => {},
        getId: (WaterLog object) => object.id,
        setId: (WaterLog object, int id) {
          object.id = id;
        },
        objectToFB: (WaterLog object, fb.Builder fbb) {
          final dbUnitOffset = fbb.writeString(object.dbUnit);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.timestamp.millisecondsSinceEpoch);
          fbb.addFloat64(2, object.value);
          fbb.addOffset(3, dbUnitOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final timestampParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final valueParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = WaterLog(
              id: idParam, timestamp: timestampParam, value: valueParam)
            ..dbUnit = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '');

          return object;
        }),
    WaterPreferences: obx_int.EntityDefinition<WaterPreferences>(
        model: _entities[3],
        toOneRelations: (WaterPreferences object) => [],
        toManyRelations: (WaterPreferences object) => {},
        getId: (WaterPreferences object) => object.id,
        setId: (WaterPreferences object, int id) {
          object.id = id;
        },
        objectToFB: (WaterPreferences object, fb.Builder fbb) {
          final dbUnitOffset =
              object.dbUnit == null ? null : fbb.writeString(object.dbUnit!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.defaultDailyGoal);
          fbb.addFloat64(2, object.defaultLogValue);
          fbb.addOffset(3, dbUnitOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final defaultDailyGoalParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final defaultLogValueParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = WaterPreferences(
              id: idParam,
              defaultDailyGoal: defaultDailyGoalParam,
              defaultLogValue: defaultLogValueParam)
            ..dbUnit = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AppUser] entity fields to define ObjectBox queries.
class AppUser_ {
  /// See [AppUser.id].
  static final id =
      obx.QueryIntegerProperty<AppUser>(_entities[0].properties[0]);

  /// See [AppUser.uid].
  static final uid =
      obx.QueryStringProperty<AppUser>(_entities[0].properties[1]);

  /// See [AppUser.email].
  static final email =
      obx.QueryStringProperty<AppUser>(_entities[0].properties[2]);

  /// See [AppUser.photoUrl].
  static final photoUrl =
      obx.QueryStringProperty<AppUser>(_entities[0].properties[3]);

  /// See [AppUser.isAnonymous].
  static final isAnonymous =
      obx.QueryBooleanProperty<AppUser>(_entities[0].properties[4]);

  /// See [AppUser.isEmailVerified].
  static final isEmailVerified =
      obx.QueryBooleanProperty<AppUser>(_entities[0].properties[5]);

  /// See [AppUser.isPhoneVerified].
  static final isPhoneVerified =
      obx.QueryBooleanProperty<AppUser>(_entities[0].properties[6]);

  /// See [AppUser.profile].
  static final profile =
      obx.QueryRelationToOne<AppUser, UserProfile>(_entities[0].properties[7]);

  /// See [AppUser.dbPreferences].
  static final dbPreferences =
      obx.QueryStringProperty<AppUser>(_entities[0].properties[8]);
}

/// [UserProfile] entity fields to define ObjectBox queries.
class UserProfile_ {
  /// See [UserProfile.id].
  static final id =
      obx.QueryIntegerProperty<UserProfile>(_entities[1].properties[0]);

  /// See [UserProfile.uid].
  static final uid =
      obx.QueryStringProperty<UserProfile>(_entities[1].properties[1]);

  /// See [UserProfile.name].
  static final name =
      obx.QueryStringProperty<UserProfile>(_entities[1].properties[2]);

  /// See [UserProfile.displayName].
  static final displayName =
      obx.QueryStringProperty<UserProfile>(_entities[1].properties[3]);

  /// See [UserProfile.age].
  static final age =
      obx.QueryIntegerProperty<UserProfile>(_entities[1].properties[4]);

  /// See [UserProfile.email].
  static final email =
      obx.QueryStringProperty<UserProfile>(_entities[1].properties[5]);

  /// See [UserProfile.photoUrl].
  static final photoUrl =
      obx.QueryStringProperty<UserProfile>(_entities[1].properties[6]);

  /// See [UserProfile.phone].
  static final phone =
      obx.QueryStringProperty<UserProfile>(_entities[1].properties[7]);

  /// See [UserProfile.painSeverity].
  static final painSeverity =
      obx.QueryIntegerProperty<UserProfile>(_entities[1].properties[8]);

  /// See [UserProfile.crisisFrequency].
  static final crisisFrequency =
      obx.QueryStringProperty<UserProfile>(_entities[1].properties[9]);

  /// See [UserProfile.height].
  static final height =
      obx.QueryDoubleProperty<UserProfile>(_entities[1].properties[10]);

  /// See [UserProfile.weight].
  static final weight =
      obx.QueryDoubleProperty<UserProfile>(_entities[1].properties[11]);

  /// See [UserProfile.bmi].
  static final bmi =
      obx.QueryDoubleProperty<UserProfile>(_entities[1].properties[12]);

  /// See [UserProfile.bloodGroup].
  static final bloodGroup =
      obx.QueryStringProperty<UserProfile>(_entities[1].properties[13]);

  /// See [UserProfile.allergies].
  static final allergies =
      obx.QueryStringVectorProperty<UserProfile>(_entities[1].properties[14]);

  /// See [UserProfile.medicalConditions].
  static final medicalConditions =
      obx.QueryStringVectorProperty<UserProfile>(_entities[1].properties[15]);

  /// See [UserProfile.dbGender].
  static final dbGender =
      obx.QueryStringProperty<UserProfile>(_entities[1].properties[16]);

  /// See [UserProfile.dbGenotype].
  static final dbGenotype =
      obx.QueryStringProperty<UserProfile>(_entities[1].properties[17]);
}

/// [WaterLog] entity fields to define ObjectBox queries.
class WaterLog_ {
  /// See [WaterLog.id].
  static final id =
      obx.QueryIntegerProperty<WaterLog>(_entities[2].properties[0]);

  /// See [WaterLog.timestamp].
  static final timestamp =
      obx.QueryDateProperty<WaterLog>(_entities[2].properties[1]);

  /// See [WaterLog.value].
  static final value =
      obx.QueryDoubleProperty<WaterLog>(_entities[2].properties[2]);

  /// See [WaterLog.dbUnit].
  static final dbUnit =
      obx.QueryStringProperty<WaterLog>(_entities[2].properties[3]);
}

/// [WaterPreferences] entity fields to define ObjectBox queries.
class WaterPreferences_ {
  /// See [WaterPreferences.id].
  static final id =
      obx.QueryIntegerProperty<WaterPreferences>(_entities[3].properties[0]);

  /// See [WaterPreferences.defaultDailyGoal].
  static final defaultDailyGoal =
      obx.QueryDoubleProperty<WaterPreferences>(_entities[3].properties[1]);

  /// See [WaterPreferences.defaultLogValue].
  static final defaultLogValue =
      obx.QueryDoubleProperty<WaterPreferences>(_entities[3].properties[2]);

  /// See [WaterPreferences.dbUnit].
  static final dbUnit =
      obx.QueryStringProperty<WaterPreferences>(_entities[3].properties[3]);
}
